package com.tasklist.api.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.tasklist.api.entity.Task;
import com.tasklist.api.response.Response;
import com.tasklist.api.service.TaskService;

@RestController
@RequestMapping("/api/task")
@CrossOrigin(origins = "*")
public class TaskController {

	
	@Autowired
	private TaskService service;
	
	@PostMapping
	public ResponseEntity<Response<Task>> create(HttpServletRequest request, @RequestBody Task task, BindingResult result){		
		
		Response<Task> response = new Response<Task>();
		
		try {
			
			ValidateCreateTask(task, result);
			
			if(result.hasErrors()) {
				result.getAllErrors().forEach(error -> response.getErrors().add(error.getDefaultMessage()));
				return ResponseEntity.badRequest().body(response);
			}
			
			response.setData(this.service.createOrUpdate(task));			
			
		} catch (Exception e) {
			response.getErrors().add("Falha interna.");
			return ResponseEntity.badRequest().body(response);
		}		
		
		return ResponseEntity.ok(response);
	}
	
	private void ValidateCreateTask(Task task, BindingResult result) {
		
		if(task.getTitle() == null) {
			result.addError(new ObjectError("Task", "Título não informado!"));
		}
		
		if(task.getDescription() == null) {
			result.addError(new ObjectError("Task", "Descrição não informada!"));
		}		
	}
	
	@PutMapping
	public ResponseEntity<Response<Task>> update(HttpServletRequest request, @RequestBody Task task, BindingResult result){
		return null;
	}

	private void ValidateUpdateTask(Task task, BindingResult result) {
		
		if(task.getId() == 0) {
			result.addError(new ObjectError("Task", "Id não informado!"));
		}		
		
		if(task.getTitle() == null) {
			result.addError(new ObjectError("Task", "Título não informado!"));
		}
		
		if(task.getDescription() == null) {
			result.addError(new ObjectError("Task", "Descrição não informada!"));
		}		
	}
	
	/*
	 * @RequestMapping(value = "/task", method = RequestMethod.GET) public
	 * List<Task> getAll() { return this.service.findAll(); }
	 * 
	 * @RequestMapping(value = "/task", method = RequestMethod.POST) public Task
	 * save(@RequestBody Task task) { return this.; }
	 * 
	 * @RequestMapping(value = "/task/{id}", method = RequestMethod.DELETE) public
	 * void delete(@PathVariable long id) { this.repository.deleteById(id); }
	 * 
	 * @RequestMapping(value = "/task/{id}", method = RequestMethod.PUT) public void
	 * update(@RequestBody Task task) { this.repository.save(task); }
	 */	 
	
}
